buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.openapitools:openapi-generator-gradle-plugin:5.4.0"
  }
}

apply plugin: 'org.openapi.generator'
apply from: "$rootDir/gradle/java.gradle"

dependencies {
  implementation deps.slf4j

  implementation project(':internal-api')
  implementation project(':utils:container-utils')
  implementation project(':utils:socket-utils')

  api deps.okhttp
  api group: 'com.squareup.moshi', name: 'moshi', version: '1.9.2'
  implementation group: 'com.datadoghq', name: 'java-dogstatsd-client', version: "${versions.dogstatsd}"

  testImplementation project(':utils:test-utils')
  testImplementation deps.bytebuddy
  testImplementation group: 'org.msgpack', name: 'msgpack-core', version: '0.8.20'
  testImplementation group: 'org.msgpack', name: 'jackson-dataformat-msgpack', version: '0.8.20'
}

ext {
  minimumBranchCoverage = 0.6
  minimumInstructionCoverage = 0.8
  excludedClassesCoverage = [
    'datadog.communication.ddagent.ExternalAgentLauncher',
    'datadog.communication.http.OkHttpUtils',
    'datadog.communication.http.OkHttpUtils.ByteBufferRequestBody',
    'datadog.communication.http.OkHttpUtils.GZipByteBufferRequestBody',
    'datadog.communication.monitor.DDAgentStatsDConnection',
    'datadog.communication.monitor.DDAgentStatsDConnection.*',
    'datadog.communication.monitor.LoggingStatsDClient',
  ]
  excludedClassesBranchCoverage = []
  excludedClassesInstructionCoverage = [// can't reach the error condition now
    'datadog.communication.fleet.FleetServiceImpl',]
  minJavaVersionForTests = JavaVersion.VERSION_1_7
}

openApiGenerate {
  generatorName = "java"
  inputSpec = "$projectDir/src/main/schemas/telemetry-api-v1.yaml".toString()
  outputDir = "$buildDir/generated".toString()
  modelPackage = "datadog.communication.telemetry.api"
  // openApi generator doesn't support Moshi, so we're using custom template based on microprofile
  templateDir = "$projectDir/templates".toString()

  typeMappings = [
    // Java representation of ambiguous types
    "OneOfnumberbooleanstring": "Object", // number/boolean/string
    "OneOfintegerdouble": "Number",       // integer/double
    "integer": "Long"
  ]
  importMappings = [
    // Java representation of ambiguous imports
    'OneOfnumberbooleanstring': 'java.lang.Object',
    'OneOfintegerdouble': 'java.lang.Number',
  ]

  configOptions = [
    dateLibrary: "java8",
    library: "microprofile",
    openApiNullable: "false",
    useOneOfInterfaces: "true",
    legacyDiscriminatorBehavior: "false",
  ]
  globalProperties = [
    // force generate only the models
    apis: "false",
    invokers: "false",
    models: "",
    modelDocs: "false",
    modelTests: "false"
  ]
}

compileJava.dependsOn tasks.openApiGenerate

sourceSets.main.java.srcDirs += "$buildDir/generated/src/main/java"
